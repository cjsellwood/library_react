{"version":3,"sources":["Components/Library/BookForm/BookForm.module.css","Components/Library/Book/ReadBtn/ReadBtn.module.css","Components/UI/TopBar/TopBar.module.css","Components/Library/Library.module.css","Components/Library/Book/Book.module.css","Components/Library/Book/DeleteBtn/DeleteBtn.module.css","Components/Library/NewBook/NewBook.module.css","Components/UI/Backdrop/Backdrop.module.css","hoc/Aux/Aux.js","Components/UI/TopBar/TopBar.js","Components/Library/Book/ReadBtn/ReadBtn.js","Components/Library/Book/DeleteBtn/DeleteBtn.js","Components/Library/Book/Book.js","Components/Library/NewBook/NewBook.js","Components/UI/Backdrop/Backdrop.js","Components/Library/BookForm/BookForm.js","Components/UI/Modal/Modal.js","Components/Library/Library.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","aux","props","children","topBar","className","classes","TopBar","readBtn","attachedClasses","ReadBtn","Read","readStatus","NotRead","join","onClick","changeRead","id","deleteBtn","DeleteBtn","deleteBook","book","Book","style","title","author","pages","newBook","NewBook","showModal","backdrop","Backdrop","hideModal","bookForm","BookForm","onSubmit","submitForm","method","type","name","onChange","event","changed","value","RadioLabel","Submit","Cancel","modal","show","Aux","Library","state","books","changeReadStatusHandler","index","findIndex","updatedBooks","window","localStorage","setItem","JSON","stringify","setState","deleteBookHandler","splice","showModalHandler","hideModalHandler","submitFormHandler","preventDefault","currentForm","booksArray","push","length","Number","changeHandler","target","updatedBook","booksStored","parse","getItem","this","booksList","map","el","i","key","Modal","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8902a853.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BookForm\":\"BookForm_BookForm__3ADQo\",\"RadioLabel\":\"BookForm_RadioLabel__1BIvq\",\"Submit\":\"BookForm_Submit__2iDVb\",\"Cancel\":\"BookForm_Cancel__1aggm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ReadBtn\":\"ReadBtn_ReadBtn__2TYed\",\"Read\":\"ReadBtn_Read__3IpE3\",\"NotRead\":\"ReadBtn_NotRead__4AE4A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TopBar\":\"TopBar_TopBar__2pS1i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Library\":\"Library_Library__2jNgm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Book\":\"Book_Book__11lWO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DeleteBtn\":\"DeleteBtn_DeleteBtn__16tyo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewBook\":\"NewBook_NewBook__1hBt0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__3cPEq\"};","const aux = (props) => props.children;\n\nexport default aux;\n","import React from \"react\";\nimport classes from \"./TopBar.module.css\";\n\nconst topBar = () => {\n  return (\n    <div className={classes.TopBar}>\n      <h1>Library</h1>\n    </div>\n  )\n}\n\nexport default topBar;","import React from \"react\";\nimport classes from \"./ReadBtn.module.css\";\n\nconst readBtn = (props) => {\n  // Change button color based upon read status\n  let attachedClasses = [classes.ReadBtn, classes.Read];\n  if (!props.readStatus) {\n    attachedClasses = [classes.ReadBtn, classes.NotRead];\n  }\n\n  return (\n    <button\n      className={attachedClasses.join(\" \")}\n      onClick={() => props.changeRead(props.id)}\n    >\n      {props.readStatus ? \"Read\" : \"Not Read\"}\n    </button>\n  );\n};\n\nexport default readBtn;\n","import React from \"react\";\nimport classes from \"./DeleteBtn.module.css\";\n\n// Component for delete button on each book\nconst deleteBtn = (props) => {\n  return (\n    <button\n      className={classes.DeleteBtn}\n      onClick={() => props.deleteBook(props.id)}\n    >\n      Delete\n    </button>\n  );\n};\n\nexport default deleteBtn;\n","import React from \"react\";\nimport classes from \"./Book.module.css\";\nimport ReadBtn from \"./ReadBtn/ReadBtn\";\nimport DeleteBtn from \"./DeleteBtn/DeleteBtn\";\n\nconst book = (props) => {\n  return (\n    <div className={classes.Book}>\n      <div style={{ \"fontWeight\": \"bold\", \"fontSize\": \"1.2em\" }}>\n        {props.title}\n      </div>\n      <div>{props.author}</div>\n      <div>Pages: {props.pages}</div>\n      <div>\n        <ReadBtn\n          changeRead={props.changeRead}\n          id={props.id}\n          readStatus={props.readStatus}\n        />\n        <DeleteBtn deleteBook={props.deleteBook} id={props.id} />\n      </div>\n    </div>\n  );\n};\n\nexport default book;\n","import React from \"react\"\nimport classes from \"./NewBook.module.css\";\n\nconst newBook = (props) => {\n  return (\n    <div className={classes.NewBook}>\n      <button onClick={props.showModal}>+</button>\n    </div>\n  );\n}\n\nexport default newBook;","import React from \"react\";\nimport classes from \"./Backdrop.module.css\";\n\nconst backdrop = (props) => {\n  return (\n    <div className={classes.Backdrop} onClick={props.hideModal}></div>\n  );\n};\n\nexport default backdrop;","import React from \"react\";\nimport classes from \"./BookForm.module.css\";\n\nconst bookForm = (props) => {\n  return (\n    <div className={classes.BookForm}>\n      <form onSubmit={props.submitForm} method=\"post\">\n        <label>Title</label>\n        <input\n          type=\"text\"\n          name=\"title\"\n          onChange={(event) => props.changed(event)}\n        />\n        <label>Author</label>\n        <input\n          type=\"text\"\n          name=\"author\"\n          onChange={(event) => props.changed(event)}\n        />\n        <label>Pages</label>\n        <input\n          type=\"number\"\n          name=\"pages\"\n          onChange={(event) => props.changed(event)}\n        />\n        <label>Status</label>\n        <br />\n        <input\n          type=\"radio\"\n          name=\"readStatus\"\n          value={true}\n          onChange={(event) => props.changed(event)}\n        />\n        <label className={classes.RadioLabel}>Read</label>\n        <br />\n        <input\n          type=\"radio\"\n          name=\"readStatus\"\n          value={false}\n          onChange={(event) => props.changed(event)}\n        />\n        <label className={classes.RadioLabel}>Not Read</label>\n        <br />\n        <button type=\"submit\" className={classes.Submit}>\n          Submit\n        </button>\n        <button\n          type=\"button\"\n          className={classes.Cancel}\n          onClick={props.hideModal}\n        >\n          Cancel\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default bookForm;\n","import React from \"react\";\nimport Aux from \"../../../hoc/Aux/Aux\";\nimport Backdrop from \"../../UI/Backdrop/Backdrop\";\nimport BookForm from \"../../Library/BookForm/BookForm\";\n\nconst modal = (props) => {\n  // Show form modal based on whether state showModal is true\n  return props.show ? (\n    <Aux>\n      <Backdrop hideModal={props.hideModal} />\n      <BookForm hideModal={props.hideModal} submitForm={props.submitForm} changed={props.changed}/>\n    </Aux>\n  ) : null;\n};\n\nexport default modal;\n","import React, { Component } from \"react\";\nimport classes from \"./Library.module.css\";\nimport Book from \"./Book/Book\";\nimport NewBook from \"./NewBook/NewBook\";\nimport Modal from \"../UI/Modal/Modal\";\nimport Aux from \"../../hoc/Aux/Aux\";\n\nclass Library extends Component {\n  state = {\n    books: [],\n    showModal: false,\n    newBook: {\n      title: \"\",\n      author: \"\",\n      pages: \"\",\n      readStatus: false,\n    },\n  };\n\n  // NewBook = New BookItem(\"Title\", \"Author\", \"124\", false)\n\n  // Get books array from local storage on first load\n  componentDidMount() {\n    let booksStored = JSON.parse(window.localStorage.getItem(\"books\"));\n    // Test books added\n    if (booksStored === null || booksStored.length === 0) {\n      booksStored = [\n        {\n          id: 0,\n          title: \"Title\",\n          author: \"Author\",\n          pages: 123,\n          readStatus: false,\n        },\n        {\n          id: 1,\n          title: \"Title 2\",\n          author: \"Author 2\",\n          pages: 456,\n          readStatus: true,\n        },\n      ];\n    }\n    this.setState({ books: booksStored });\n  }\n\n  // Changes Read status on press of Read or Not Read button\n  changeReadStatusHandler = (id) => {\n    // Find book corresponding to index from button pressed\n    const index = this.state.books.findIndex((book) => {\n      return book.id === id;\n    });\n\n    // Get read status of the found book\n    const readStatus = this.state.books[index].readStatus;\n\n    // Clone existing books array from state\n    const updatedBooks = [...this.state.books];\n    // Update read status of book and set it to new state\n    updatedBooks[index].readStatus = !readStatus;\n\n    // Store array in local storage\n    window.localStorage.setItem('books', JSON.stringify(updatedBooks));\n\n    this.setState({ books: updatedBooks });\n  };\n\n  // Delete book when button pressed on a book\n  deleteBookHandler = (id) => {\n    // Find book corresponding to index from button pressed\n    const index = this.state.books.findIndex((book) => {\n      return book.id === id;\n    });\n\n    let updatedBooks = [...this.state.books];\n    updatedBooks.splice(index, 1);\n\n    // Store array in local storage\n    window.localStorage.setItem('books', JSON.stringify(updatedBooks));\n\n    this.setState({ books: updatedBooks });\n  };\n\n  //Hide and show modal functions\n  showModalHandler = () => {\n    this.setState({ showModal: true });\n  };\n\n  hideModalHandler = () => {\n    this.setState({ showModal: false });\n  };\n\n  // Handle form submission\n  submitFormHandler = (event) => {\n    event.preventDefault();\n    const currentForm = this.state.newBook;\n\n    let booksArray = [...this.state.books];\n\n    // Add new book object to books array in state\n    booksArray.push({\n      id: this.state.books[this.state.books.length - 1].id + 1,\n      title: currentForm.title,\n      author: currentForm.author,\n      pages: Number(currentForm.pages),\n      readStatus: currentForm.readStatus,\n    });\n\n    // Store array in local storage\n    window.localStorage.setItem('books', JSON.stringify(booksArray));\n\n    this.setState({ books: booksArray });\n    this.hideModalHandler();\n  };\n\n  // Changes state to the entered form values\n  changeHandler = (event) => {\n    let name = event.target.name;\n    let value = event.target.value;\n    let updatedBook = { ...this.state.newBook };\n\n    // For readStatus\n    if (name === \"readStatus\") {\n      if (value === \"true\") {\n        updatedBook[\"readStatus\"] = true;\n      } else {\n        updatedBook[\"readStatus\"] = false;\n      }\n    } else {\n      updatedBook[name] = value;\n    }\n\n    this.setState({ newBook: updatedBook });\n  };\n\n  render() {\n    // Render each book from the state books array\n    const booksList = this.state.books.map((el, i) => {\n      return (\n        <Book\n          title={this.state.books[i].title}\n          author={this.state.books[i].author}\n          pages={this.state.books[i].pages}\n          readStatus={this.state.books[i].readStatus}\n          key={this.state.books[i].id}\n          id={this.state.books[i].id}\n          changeRead={this.changeReadStatusHandler}\n          deleteBook={this.deleteBookHandler}\n        />\n      );\n    });\n\n    return (\n      <Aux>\n        <Modal\n          show={this.state.showModal}\n          hideModal={this.hideModalHandler}\n          submitForm={this.submitFormHandler}\n          changed={this.changeHandler}\n        />\n        <div className={classes.Library}>\n          {booksList}\n          <NewBook showModal={this.showModalHandler} />\n        </div>\n      </Aux>\n    );\n  }\n}\n\nexport default Library;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Aux from \"./hoc/Aux/Aux\";\nimport TopBar from \"./Components/UI/TopBar/TopBar\";\nimport Library from \"./Components/Library/Library\";\n\nclass App extends Component {\n  render () {\n    return (\n    <Aux>\n      <TopBar/>\n      <Library/>\n    </Aux>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}